## Originally generated by ChatGPT, on 2025/5/20.
## Refactored: 2025/9/22
##
## This script filters a FASTA file by removing sequences listed in an exclusion file.
## If the exclusion list ('temp/HOMD_16S_dropped_header.txt') is empty,
## there is no need to run this script, as no filtering will occur.

from Bio import SeqIO
import os
from datetime import datetime

# --- CONFIGURATION ---
# Please specify the paths to your input files here.
EXCLUSION_LIST_FILE = "temp/HOMD_16S_dropped_header.txt"
INPUT_FASTA_FILE = "HOMD_download/HOMD_16S_rRNA_RefSeq_V16.03_full.fasta"

#================================================================================

# --- File I/O Setup ---
# Automatically generate the output filename based on the input FASTA file.
input_basename = os.path.basename(INPUT_FASTA_FILE)
name, ext = os.path.splitext(input_basename)
output_file = f"{name}_filtered{ext}"

# Generate a unique, timestamped log filename.
log_file = f"{name}_filter_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"

# --- Main Filtering Process ---
print(f"\n--- Starting FASTA Filtering ---")
print(f"Reading exclusion list from: {EXCLUSION_LIST_FILE}")

# Load the list of sequence ID prefixes to exclude.
with open(EXCLUSION_LIST_FILE) as f:
    exclude_prefixes = [line.strip() for line in f if line.strip()]

# Check if the exclusion list is empty.
if not exclude_prefixes:
    # If the list is empty, no filtering is needed.
    message = "Exclusion list is empty. No sequences will be removed. Skipping filtering."
    print(f"\nâœ… {message}")
    
    # Write a log file indicating that nothing was done.
    log_lines = [
        f"Date/time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"Input FASTA file: {INPUT_FASTA_FILE}",
        f"Exclusion list file: {EXCLUSION_LIST_FILE}",
        "",
        f"Result: {message}"
    ]
    with open(log_file, "w") as logf:
        logf.write("\n".join(log_lines))
    
    print(f"A log has been saved to: {log_file}")

else:
    # If the list is not empty, proceed with filtering.
    total_count = 0
    excluded_count = 0
    filtered_records = []
    excluded_ids = []

    print(f"Filtering sequences from {INPUT_FASTA_FILE}...")

    for record in SeqIO.parse(INPUT_FASTA_FILE, "fasta"):
        total_count += 1
        # Check if the record's ID starts with any of the prefixes in the exclusion list.
        if any(record.id.startswith(prefix) for prefix in exclude_prefixes):
            excluded_count += 1
            excluded_ids.append(record.id)
        else:
            # If not in the exclusion list, keep the record.
            filtered_records.append(record)

    # --- Output and Logging ---

    # Write the kept records to the new, filtered FASTA file.
    SeqIO.write(filtered_records, output_file, "fasta")

    # Prepare the content for the log file.
    log_lines = [
        f"Input FASTA file: {INPUT_FASTA_FILE}",
        f"Exclusion list file: {EXCLUSION_LIST_FILE}",
        f"Output file: {output_file}",
        f"Date/time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"Total sequences in input: {total_count}",
        f"Sequences excluded: {excluded_count}",
        f"Sequences kept: {len(filtered_records)}",
        "",
        "=== Excluded Sequence IDs ===",
    ] + excluded_ids

    # Save the log to a file.
    with open(log_file, "w") as logf:
        logf.write("\n".join(log_lines))

    # Print a summary of the results to the console.
    print("\n--- Filtering Complete ---")
    print("\n".join(log_lines[:7]))
    print(f"\nA detailed log has been saved to: {log_file}")