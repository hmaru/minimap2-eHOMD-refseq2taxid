## 2025/05/20
## Originally generated by ChatGPT.

from Bio import SeqIO
import os
from datetime import datetime

# Load the list of sequence ID prefixes to exclude.
# The script will remove any sequence whose ID starts with a prefix in this list.
with open("temp/HOMD_16S_dropped_header.txt") as f:
    exclude_prefixes = [line.strip() for line in f if line.strip()]

# --- File I/O Setup ---

# Define the input FASTA file.
input_file = "HOMD_download/HOMD_16S_rRNA_RefSeq_V16.01_full.fasta"

# Automatically generate the output filename based on the input filename.
# The output will be saved to the current working directory.
input_basename = os.path.basename(input_file)
name, ext = os.path.splitext(input_basename)
output_file = f"{name}_filtered{ext}"

# Generate a unique, timestamped log filename.
log_file = f"{name}_filter_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"

# --- Main Filtering Process ---
total_count = 0
excluded_count = 0
filtered_records = []
excluded_ids = []

print(f"Filtering sequences from {input_file}...")

for record in SeqIO.parse(input_file, "fasta"):
    total_count += 1
    # Check if the record's ID starts with any of the prefixes in the exclusion list.
    if any(record.id.startswith(prefix) for prefix in exclude_prefixes):
        excluded_count += 1
        excluded_ids.append(record.id)
    else:
        # If not in the exclusion list, keep the record.
        filtered_records.append(record)

# --- Output and Logging ---

# Write the kept records to the new, filtered FASTA file.
SeqIO.write(filtered_records, output_file, "fasta")

# Prepare the content for the log file.
log_lines = [
    f"Input file: {input_file}",
    f"Output file: {output_file}",
    f"Date/time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
    f"Total sequences in input: {total_count}",
    f"Sequences excluded: {excluded_count}",
    f"Sequences kept: {len(filtered_records)}",
    "",
    "=== Excluded Sequence IDs ===",
] + excluded_ids

# Save the log to a file.
with open(log_file, "w") as logf:
    logf.write("\n".join(log_lines))

# Print a summary of the results to the console.
print("\n--- Filtering Complete ---")
print("\n".join(log_lines[:6]))
print(f"\nA detailed log has been saved to: {log_file}")